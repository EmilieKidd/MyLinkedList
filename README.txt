Assignment 2 Documentation

The add( ) method is based on the single parameter insert( ) method from Weiss’ SortedLinkedList class. The method keeps track of two nodes, one starting at the header, and one starting at the first valid node. The itemToAdd is compared to the current node, and advances the current and previous nodes to continue down the list. Once the itemToAdd node is is smaller than current, the insert( ) method is used to place the itemToAdd and then the previous is then made to be the next of itemToAdd. I believe that the insert( ) method is now made private so that it cannot be used outside the class, since we want to keep the list sorted which is now done by using add( ) instead.

In the replace( ) method, we need to use the find( ) method to locate the item to be replaced. If the result of the find( ) method is not null (meaning the item was found), then we can add the item that is replacing the original item with the add( ) method. This will return true. If the item to be replaced is not found, then it will return false. I opted to use the add( ) method, rather than the insert( ) method, since the list needs to stay in sorted order. If the inserted item was simply put in the place of the item that was replaced, the new item wouldn’t necessarily be in order.

showList( ) is basically just printList( ), but prints each item on its own line. Overloaded showList( ) uses the requested amount per line to determine how many items to print per line. To determine when to create a newline, I created an int variable to keep track of how many times the for loop has looped. Once the counter is too big, a new line is created and the counter is reset. I used the listSize( ) method at the end of each of the showList( ) methods to display the size of the list instance.
 
For getMode( ), I copied over my method from assignment 1 to get the basic skeleton outlined. I then adapted the routines to handle the list iterator and list methods. Based on the comment from my assignment 1, I changed the way Result was implemented for this method. Instead of using an anonymous class inside the getMode( ) method, I created an inner class ListResult, which implements Result. This implementation has a constructor which produces the max value and count from getMode( ). I then create an instance of my ListResult inside getMode( ), and feed it the maxValue and maxCount to produce the mode and count. Also, I figured out what was wrong with my getMode( ) from assignment 1. I used the compareTo( ) method instead of just double equals to compare the two nodes to see if they are the same.

author( ) returns a simple string of my name.
